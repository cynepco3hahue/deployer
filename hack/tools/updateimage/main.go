/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Copyright 2021 Red Hat, Inc.
 */

package main

import (
	"encoding/json"
	"fmt"
	"os"
	"strings"
	"text/template"

	"github.com/stoewer/go-strcase"

	"github.com/k8stopologyawareschedwg/deployer/pkg/images"
)

type revisionData struct {
	Revision int
	Images   map[string]string
}

func main() {
	rev := revisionData{
		Revision: images.Revision + 1,
		Images:   make(map[string]string),
	}

	imgs := make(map[string]string)
	json.NewDecoder(os.Stdin).Decode(&imgs)

	for name, pullSpec := range imgs {
		imgName := fmt.Sprintf("%sDefaultImage", strcase.UpperCamelCase(name))
		rev.Images[imgName] = strings.TrimSpace(pullSpec)
	}

	tmpl := template.Must(template.New("rev").Parse(tmplText))
	tmpl.Execute(os.Stdout, rev)
}

var tmplText string = `/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Copyright 2021 Red Hat, Inc.
 */

/* THIS FILE IS AUTOMATICALLY GENERATED: DO NOT EDIT */

package images

// "Revision" is a opaque integer that is used to link together a set of
// images we should deploy together. Bump it each time we update -any-
// of the image pullspecs.
const (
	Revision = {{.Revision}}
)

const (
	{{ range $key, $value := .Images }}{{ $key }} = "{{ $value }}"
	{{ end }}
)
`
